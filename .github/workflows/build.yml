  name: Push the Docker image to AWS ECR Repo
  on:
    push:
      branches:
        - master
  jobs:
    Terraform:
      name: Terraform
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash
          # We keep Terraform files in the terraform directory.
          working-directory: ./infra/dev
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Setup Terraform with specified version on the runner
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "1.7.0"
          
        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          continue-on-error: true

        - name: Terraform Init
          id: init
          run: terraform init

        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color

        - name: Terraform Plan
          id: plan
          run: terraform plan -no-color
          continue-on-error: true

    BuildAndDeploy:
      name: BuildAndDeploy
      needs: Terraform
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Get commit hash
          id: get-commit-hash
          run: echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

        - name: Get timestamp
          id: get-timestamp
          run:  echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT

        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            echo ${{ steps.build-image.outputs.image }}


        # - name: Render Amazon ECS task definition
        #   id: render-api-container
        #   uses: aws-actions/amazon-ecs-render-task-definition@v1
        #   with:
        #     task-definition: task-definition.json
        #     container-name: api
        #     image: ${{ steps.build-image.outputs.image }}
        #     log-configuration-log-driver: awslogs
        #     log-configuration-options: |
        #       awslogs-create-group=true
        #       awslogs-group=/ecs/api
        #       awslogs-region=us-east-1
        #       awslogs-stream-prefix=ecs

        # - name: Deploy Amazon ECS task definition
        #   id: deploy-api-container
        #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        #   with:
        #     task-definition: ${{ steps.render-api-container.outputs.task-definition }}
        #     service: ${{ secrets.SERVICE_NAME }}
        #     cluster: ${{ secrets.CLUSTER_NAME }}
        #     wait-for-service-stability: true
        #     service-stability-period: 180