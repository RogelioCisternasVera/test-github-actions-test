  name: Push the Docker image to AWS ECR Repo
  on:
    push:
      branches:
        - master
  jobs:
    Terraform:
      name: Terraform
      runs-on: ubuntu-latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-2
      defaults:
        run:
          shell: bash
          # We keep Terraform files in the terraform directory.
          working-directory: ./infra/dev
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Setup Terraform with specified version on the runner
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "1.7.0"
          
        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          continue-on-error: true

        - name: Terraform Init
          id: init
          run: terraform init

        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color

        - name: Terraform Plan
          id: plan
          run: terraform plan -no-color -out=tfplan
          continue-on-error: true

        - name: Terraform Apply
          id: apply
          run: terraform apply -auto-approve tfplan

    BuildAndDeploy:
      name: BuildAndDeploy
      needs: Terraform
      runs-on: ubuntu-latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-2
        ECS_SERVICE_NAME: github-poc-dev-poc-github
        ECS_CLUSTER_NAME: github-poc-dev
        REPO_NAME: ${{ secrets.REPO_NAME }}
        CONTAINER_NAME: github-poc-dev-poc-github
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Get commit hash
          id: get-commit-hash
          run: echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

        - name: Get timestamp
          id: get-timestamp
          run:  echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT

        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ env.REPO_NAME }}
            IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            echo ${{ steps.build-image.outputs.image }}


        - name: Download the task definition file from aws
          run: |
            aws ecs describe-task-definition --task-definition ${{ env.CONTAINER_NAME }} --query 'taskDefinition' --output json > aws-task-definition.json

        - name: Remove compatibilities, taskDefinitionArn attributes from task-definition.json
          run: |
            jq 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' aws-task-definition.json > task-definition.json

        - name: Render Amazon ECS task definition
          id: render-api-container
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}

        - name: Deploy Amazon ECS task definition
          id: deploy-api-container
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.render-api-container.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE_NAME }}
            cluster: ${{ env.ECS_CLUSTER_NAME }}
            wait-for-service-stability: true